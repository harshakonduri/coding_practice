public class WeightedQuickUnion {
    int [] id;
    int [] sz;
    int size;
    public WeightedQuickUnion(int size) {
	this.size = size;
	id = new int[size];
	sz = new int[size];
	for(int i = 0;i < size; i++) {
	    id[i] = i;
	    sz[i] = 1;
	}
    }
    void union(int p,int q) {
	int rankP = rank(p);
	int rankQ = rank(q);
	if(id[rankP] == id[rankQ]) {
	    return;
	}
	if(sz[rankP] < sz[rankQ]) {
	    id[rankP] = id[rankQ];
	    sz[rankP] += sz[rankQ];
	}
	else {
	    id[rankQ] = id[rankP];
	    sz[rankQ] += sz[rankP];	    
	}
	for(int i : id) {
	    System.out.print(i+" ");
	}
	System.out.println();
    }
    boolean find(int p,int q) {	
	int rankP = rank(p);
	int rankQ = rank(q);
	return (rankP == rankQ);
    }
    private int rank(int i) {
	while(i != id[i]) {
	    i = id[i];
	}
	return i;
    }
    public static void main(String [] args) {
	QuickUnion q = new QuickUnion(10);
	System.out.println(q.find(0,3));
	q.union(0,3);
	q.union(4,3);
	q.union(5,6);
	q.union(0,5);
	System.out.println(q.find(0,3));
	System.out.println(q.find(0,6));
	System.out.println(q.find(4,6));
    }

}